{"ast":null,"code":"var _jsxFileName = \"/home/dell/zobon/dashboard-react/src/components/FullDashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport dayjs from 'dayjs';\nimport ReactWordCloud from 'react-wordcloud';\nimport { ResponsiveContainer, BarChart, Bar, XAxis, YAxis, Tooltip, CartesianGrid, PieChart, Pie, Cell, Legend, LineChart, Line } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst COLORS = ['#60A5FA', '#F87171', '#34D399', '#FBBF24', '#A78BFA', '#F472B6'];\nconst STOP_WORDS = new Set(['the', 'and', 'to', 'of', 'in', 'a', 'is', 'for', 'on', 'with', 'this', 'that', 'it', 'as', 'are', 'be', 'have', 'was', 'i', 'you', 'but', 'not', 'they', 'or', 'at']);\nexport default function FullDashboard() {\n  _s();\n  const [brands, setBrands] = useState([]);\n  const [alerts, setAlerts] = useState([]);\n  useEffect(() => {\n    axios.get('http://localhost:5001/api/brands').then(res => setBrands(res.data)).catch(console.error);\n    axios.get('http://localhost:5001/api/alerts?limit=500').then(res => setAlerts(res.data)).catch(console.error);\n  }, []);\n\n  // 1. Bar Chart: Brands vs avg_trust_score\n  const trustData = brands.map(({\n    brand,\n    avg_trust_score\n  }) => ({\n    brand,\n    avg_trust_score: Number(avg_trust_score.toFixed(2))\n  }));\n\n  // 2. Pie Chart: Mentions by brand\n  const mentionsData = brands.map(({\n    brand,\n    mention_count\n  }) => ({\n    name: brand,\n    value: mention_count\n  }));\n\n  // 3. Word Cloud data preparation per brand\n  // Choose one brand to show word cloud or aggregate all brands? We'll do aggregate for demo.\n\n  // Function to tokenize and count words in alert texts\n  const wordCounts = {};\n  alerts.forEach(({\n    text_sample\n  }) => {\n    if (!text_sample) return;\n    const words = text_sample.toLowerCase().replace(/[^\\w\\s]/g, '') // remove punctuation\n    .split(/\\s+/).filter(w => w && !STOP_WORDS.has(w) && w.length > 2);\n    words.forEach(word => {\n      wordCounts[word] = (wordCounts[word] || 0) + 1;\n    });\n  });\n\n  // Convert to word cloud format (top 100 words)\n  const wordCloudData = Object.entries(wordCounts).sort((a, b) => b[1] - a[1]).slice(0, 100).map(([text, value]) => ({\n    text,\n    value\n  }));\n\n  // 4. Line Chart: Trust score trend per brand over time (using alert timestamps & scores)\n  // Prepare: average trust score per brand per day (from alerts)\n  const brandDateMap = {};\n  alerts.forEach(({\n    brand,\n    trust_score,\n    timestamp\n  }) => {\n    if (!brand || trust_score == null || !timestamp) return;\n    const date = dayjs(timestamp).format('YYYY-MM-DD');\n    const key = `${brand}-${date}`;\n    if (!brandDateMap[key]) brandDateMap[key] = {\n      brand,\n      date,\n      trustScores: []\n    };\n    brandDateMap[key].trustScores.push(trust_score);\n  });\n  const trendData = Object.values(brandDateMap).map(({\n    brand,\n    date,\n    trustScores\n  }) => ({\n    brand,\n    date,\n    avgTrustScore: trustScores.reduce((a, b) => a + b, 0) / trustScores.length\n  }));\n\n  // For line chart: structure array by date with each brand's avgTrustScore\n  const uniqueDates = Array.from(new Set(trendData.map(d => d.date))).sort();\n  const uniqueBrands = Array.from(new Set(trendData.map(d => d.brand)));\n  const lineChartData = uniqueDates.map(date => {\n    const entry = {\n      date\n    };\n    uniqueBrands.forEach(brand => {\n      const found = trendData.find(d => d.brand === brand && d.date === date);\n      entry[brand] = found ? Number(found.avgTrustScore.toFixed(2)) : null;\n    });\n    return entry;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid grid-cols-1 lg:grid-cols-2 gap-8 p-6 bg-gray-50 min-h-screen\",\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"bg-white p-4 rounded shadow\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-bold mb-4\",\n        children: \"Average Trust Score by Brand\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        width: \"100%\",\n        height: 300,\n        children: /*#__PURE__*/_jsxDEV(BarChart, {\n          data: trustData,\n          margin: {\n            bottom: 20\n          },\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"3 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"brand\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n            domain: [0, 100]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Bar, {\n            dataKey: \"avg_trust_score\",\n            fill: \"#60A5FA\",\n            radius: [6, 6, 0, 0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"bg-white p-4 rounded shadow\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-bold mb-4\",\n        children: \"Mentions Distribution by Brand\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        width: \"100%\",\n        height: 300,\n        children: /*#__PURE__*/_jsxDEV(PieChart, {\n          children: [/*#__PURE__*/_jsxDEV(Pie, {\n            data: mentionsData,\n            dataKey: \"value\",\n            nameKey: \"name\",\n            outerRadius: 100,\n            label: ({\n              name,\n              percent\n            }) => `${name}: ${(percent * 100).toFixed(1)}%`,\n            children: mentionsData.map((entry, idx) => /*#__PURE__*/_jsxDEV(Cell, {\n              fill: COLORS[idx % COLORS.length]\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"bg-white p-4 rounded shadow\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-bold mb-4\",\n        children: \"Common Words in Alerts (All Brands)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: 300\n        },\n        children: /*#__PURE__*/_jsxDEV(ReactWordCloud, {\n          words: wordCloudData,\n          options: {\n            rotations: 2,\n            rotationAngles: [-45, 0],\n            fontSizes: [15, 60]\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"bg-white p-4 rounded shadow\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-bold mb-4\",\n        children: \"Trust Score Trend Over Time\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        width: \"100%\",\n        height: 300,\n        children: /*#__PURE__*/_jsxDEV(LineChart, {\n          data: lineChartData,\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"3 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n            domain: [0, 100]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }, this), uniqueBrands.map((brand, idx) => /*#__PURE__*/_jsxDEV(Line, {\n            type: \"monotone\",\n            dataKey: brand,\n            stroke: COLORS[idx % COLORS.length],\n            dot: false,\n            connectNulls: true,\n            strokeWidth: 2\n          }, brand, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n_s(FullDashboard, \"8D2MBDNwyMSjwVVRvj+53iuoQTM=\");\n_c = FullDashboard;\nvar _c;\n$RefreshReg$(_c, \"FullDashboard\");","map":{"version":3,"names":["React","useEffect","useState","axios","dayjs","ReactWordCloud","ResponsiveContainer","BarChart","Bar","XAxis","YAxis","Tooltip","CartesianGrid","PieChart","Pie","Cell","Legend","LineChart","Line","jsxDEV","_jsxDEV","COLORS","STOP_WORDS","Set","FullDashboard","_s","brands","setBrands","alerts","setAlerts","get","then","res","data","catch","console","error","trustData","map","brand","avg_trust_score","Number","toFixed","mentionsData","mention_count","name","value","wordCounts","forEach","text_sample","words","toLowerCase","replace","split","filter","w","has","length","word","wordCloudData","Object","entries","sort","a","b","slice","text","brandDateMap","trust_score","timestamp","date","format","key","trustScores","push","trendData","values","avgTrustScore","reduce","uniqueDates","Array","from","d","uniqueBrands","lineChartData","entry","found","find","className","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","margin","bottom","strokeDasharray","dataKey","domain","fill","radius","nameKey","outerRadius","label","percent","idx","style","options","rotations","rotationAngles","fontSizes","type","stroke","dot","connectNulls","strokeWidth","_c","$RefreshReg$"],"sources":["/home/dell/zobon/dashboard-react/src/components/FullDashboard.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport dayjs from 'dayjs';\nimport ReactWordCloud from 'react-wordcloud';\nimport {\n  ResponsiveContainer, BarChart, Bar, XAxis, YAxis, Tooltip, CartesianGrid,\n  PieChart, Pie, Cell, Legend,\n  LineChart, Line,\n} from 'recharts';\n\nconst COLORS = ['#60A5FA', '#F87171', '#34D399', '#FBBF24', '#A78BFA', '#F472B6'];\nconst STOP_WORDS = new Set([\n  'the', 'and', 'to', 'of', 'in', 'a', 'is', 'for', 'on', 'with', 'this', 'that', 'it',\n  'as', 'are', 'be', 'have', 'was', 'i', 'you', 'but', 'not', 'they', 'or', 'at',\n]);\n\nexport default function FullDashboard() {\n  const [brands, setBrands] = useState([]);\n  const [alerts, setAlerts] = useState([]);\n\n  useEffect(() => {\n    axios.get('http://localhost:5001/api/brands').then(res => setBrands(res.data)).catch(console.error);\n    axios.get('http://localhost:5001/api/alerts?limit=500').then(res => setAlerts(res.data)).catch(console.error);\n  }, []);\n\n  // 1. Bar Chart: Brands vs avg_trust_score\n  const trustData = brands.map(({ brand, avg_trust_score }) => ({\n    brand,\n    avg_trust_score: Number(avg_trust_score.toFixed(2)),\n  }));\n\n  // 2. Pie Chart: Mentions by brand\n  const mentionsData = brands.map(({ brand, mention_count }) => ({\n    name: brand,\n    value: mention_count,\n  }));\n\n  // 3. Word Cloud data preparation per brand\n  // Choose one brand to show word cloud or aggregate all brands? We'll do aggregate for demo.\n\n  // Function to tokenize and count words in alert texts\n  const wordCounts = {};\n  alerts.forEach(({ text_sample }) => {\n    if (!text_sample) return;\n    const words = text_sample\n      .toLowerCase()\n      .replace(/[^\\w\\s]/g, '') // remove punctuation\n      .split(/\\s+/)\n      .filter(w => w && !STOP_WORDS.has(w) && w.length > 2);\n    words.forEach(word => {\n      wordCounts[word] = (wordCounts[word] || 0) + 1;\n    });\n  });\n\n  // Convert to word cloud format (top 100 words)\n  const wordCloudData = Object.entries(wordCounts)\n    .sort((a, b) => b[1] - a[1])\n    .slice(0, 100)\n    .map(([text, value]) => ({ text, value }));\n\n  // 4. Line Chart: Trust score trend per brand over time (using alert timestamps & scores)\n  // Prepare: average trust score per brand per day (from alerts)\n  const brandDateMap = {};\n  alerts.forEach(({ brand, trust_score, timestamp }) => {\n    if (!brand || trust_score == null || !timestamp) return;\n    const date = dayjs(timestamp).format('YYYY-MM-DD');\n    const key = `${brand}-${date}`;\n    if (!brandDateMap[key]) brandDateMap[key] = { brand, date, trustScores: [] };\n    brandDateMap[key].trustScores.push(trust_score);\n  });\n\n  const trendData = Object.values(brandDateMap).map(({ brand, date, trustScores }) => ({\n    brand,\n    date,\n    avgTrustScore: trustScores.reduce((a, b) => a + b, 0) / trustScores.length,\n  }));\n\n  // For line chart: structure array by date with each brand's avgTrustScore\n  const uniqueDates = Array.from(new Set(trendData.map(d => d.date))).sort();\n  const uniqueBrands = Array.from(new Set(trendData.map(d => d.brand)));\n\n  const lineChartData = uniqueDates.map(date => {\n    const entry = { date };\n    uniqueBrands.forEach(brand => {\n      const found = trendData.find(d => d.brand === brand && d.date === date);\n      entry[brand] = found ? Number(found.avgTrustScore.toFixed(2)) : null;\n    });\n    return entry;\n  });\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 p-6 bg-gray-50 min-h-screen\">\n\n      {/* Bar Chart: Trust Score per Brand */}\n      <section className=\"bg-white p-4 rounded shadow\">\n        <h2 className=\"text-xl font-bold mb-4\">Average Trust Score by Brand</h2>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <BarChart data={trustData} margin={{ bottom: 20 }}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"brand\" />\n            <YAxis domain={[0, 100]} />\n            <Tooltip />\n            <Bar dataKey=\"avg_trust_score\" fill=\"#60A5FA\" radius={[6, 6, 0, 0]} />\n          </BarChart>\n        </ResponsiveContainer>\n      </section>\n\n      {/* Pie Chart: Mentions distribution */}\n      <section className=\"bg-white p-4 rounded shadow\">\n        <h2 className=\"text-xl font-bold mb-4\">Mentions Distribution by Brand</h2>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <PieChart>\n            <Pie\n              data={mentionsData}\n              dataKey=\"value\"\n              nameKey=\"name\"\n              outerRadius={100}\n              label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(1)}%`}\n            >\n              {mentionsData.map((entry, idx) => (\n                <Cell key={idx} fill={COLORS[idx % COLORS.length]} />\n              ))}\n            </Pie>\n            <Tooltip />\n            <Legend />\n          </PieChart>\n        </ResponsiveContainer>\n      </section>\n\n      {/* Word Cloud */}\n      <section className=\"bg-white p-4 rounded shadow\">\n        <h2 className=\"text-xl font-bold mb-4\">Common Words in Alerts (All Brands)</h2>\n        <div style={{ height: 300 }}>\n          <ReactWordCloud\n            words={wordCloudData}\n            options={{\n              rotations: 2,\n              rotationAngles: [-45, 0],\n              fontSizes: [15, 60],\n            }}\n          />\n        </div>\n      </section>\n\n      {/* Line Chart: Trust Score Trend Over Time */}\n      <section className=\"bg-white p-4 rounded shadow\">\n        <h2 className=\"text-xl font-bold mb-4\">Trust Score Trend Over Time</h2>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <LineChart data={lineChartData}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"date\" />\n            <YAxis domain={[0, 100]} />\n            <Tooltip />\n            <Legend />\n            {uniqueBrands.map((brand, idx) => (\n              <Line\n                key={brand}\n                type=\"monotone\"\n                dataKey={brand}\n                stroke={COLORS[idx % COLORS.length]}\n                dot={false}\n                connectNulls\n                strokeWidth={2}\n              />\n            ))}\n          </LineChart>\n        </ResponsiveContainer>\n      </section>\n\n    </div>\n  );\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}