{"ast":null,"code":"var _jsxFileName = \"/home/dell/zobon/dashboard-react/src/components/FullDashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport dayjs from 'dayjs';\nimport { ResponsiveContainer, BarChart, Bar, XAxis, YAxis, Tooltip, CartesianGrid, Legend, PieChart, Pie, Cell, LineChart, Line } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst COLORS = ['#60A5FA', '#F87171', '#34D399', '#FBBF24', '#A78BFA', '#F472B6'];\nexport default function FullDashboard() {\n  _s();\n  const [brands, setBrands] = useState([]);\n  const [alerts, setAlerts] = useState([]);\n  useEffect(() => {\n    axios.get('http://localhost:5001/api/brands').then(res => setBrands(res.data)).catch(console.error);\n    axios.get('http://localhost:5001/api/alerts?limit=500').then(res => setAlerts(res.data)).catch(console.error);\n  }, []);\n\n  // 1. Average Trust Score by Brand for Bar Chart\n  const trustData = brands.map(({\n    brand,\n    avg_trust_score\n  }) => ({\n    brand,\n    avg_trust_score: Number(avg_trust_score.toFixed(2))\n  }));\n\n  // 2. Distribution of Alert Levels for Pie Chart\n  const alertLevelCounts = alerts.reduce((acc, alert) => {\n    acc[alert.alert_level] = (acc[alert.alert_level] || 0) + 1;\n    return acc;\n  }, {});\n  const alertLevelData = Object.entries(alertLevelCounts).map(([level, count]) => ({\n    name: level,\n    value: count\n  }));\n\n  // 3. Stacked Bar Chart data: Number of Alerts by Brand grouped by Alert Level\n  // Build a nested map: brand -> alert_level -> count\n  const brandAlertLevelMap = {};\n  brands.forEach(({\n    brand\n  }) => {\n    brandAlertLevelMap[brand] = {};\n  });\n  alerts.forEach(({\n    brand,\n    alert_level\n  }) => {\n    if (brandAlertLevelMap[brand]) {\n      brandAlertLevelMap[brand][alert_level] = (brandAlertLevelMap[brand][alert_level] || 0) + 1;\n    }\n  });\n\n  // Prepare stacked bar chart data\n  const alertLevels = Array.from(new Set(alerts.map(a => a.alert_level)));\n  const stackedBarData = brands.map(({\n    brand\n  }) => {\n    const item = {\n      brand\n    };\n    alertLevels.forEach(level => {\n      item[level] = brandAlertLevelMap[brand][level] || 0;\n    });\n    return item;\n  });\n\n  // 4. Line Chart: Trust Score Trend Over Time per Brand (from alerts)\n  const brandDateMap = {};\n  alerts.forEach(({\n    brand,\n    trust_score,\n    timestamp\n  }) => {\n    if (!brand || trust_score == null || !timestamp) return;\n    const date = dayjs(timestamp).format('YYYY-MM-DD');\n    const key = `${brand}-${date}`;\n    if (!brandDateMap[key]) brandDateMap[key] = {\n      brand,\n      date,\n      trustScores: []\n    };\n    brandDateMap[key].trustScores.push(trust_score);\n  });\n  const trendData = Object.values(brandDateMap).map(({\n    brand,\n    date,\n    trustScores\n  }) => ({\n    brand,\n    date,\n    avgTrustScore: trustScores.reduce((a, b) => a + b, 0) / trustScores.length\n  }));\n  const uniqueDates = Array.from(new Set(trendData.map(d => d.date))).sort();\n  const uniqueBrands = Array.from(new Set(trendData.map(d => d.brand)));\n  const lineChartData = uniqueDates.map(date => {\n    const entry = {\n      date\n    };\n    uniqueBrands.forEach(brand => {\n      const found = trendData.find(d => d.brand === brand && d.date === date);\n      entry[brand] = found ? Number(found.avgTrustScore.toFixed(2)) : null;\n    });\n    return entry;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid grid-cols-1 lg:grid-cols-2 gap-8 p-6 bg-gray-50 min-h-screen\",\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"bg-white p-4 rounded shadow\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-bold mb-4\",\n        children: \"Average Trust Score by Brand\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        width: \"100%\",\n        height: 300,\n        children: /*#__PURE__*/_jsxDEV(BarChart, {\n          data: trustData,\n          margin: {\n            bottom: 20\n          },\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"3 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"brand\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n            domain: [0, 100]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Bar, {\n            dataKey: \"avg_trust_score\",\n            fill: \"#60A5FA\",\n            radius: [6, 6, 0, 0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"bg-white p-4 rounded shadow\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-bold mb-4\",\n        children: \"Alert Levels Distribution\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        width: \"100%\",\n        height: 300,\n        children: /*#__PURE__*/_jsxDEV(PieChart, {\n          children: [/*#__PURE__*/_jsxDEV(Pie, {\n            data: alertLevelData,\n            dataKey: \"value\",\n            nameKey: \"name\",\n            outerRadius: 100,\n            label: ({\n              name,\n              percent\n            }) => `${name}: ${(percent * 100).toFixed(1)}%`,\n            children: alertLevelData.map((entry, idx) => /*#__PURE__*/_jsxDEV(Cell, {\n              fill: COLORS[idx % COLORS.length]\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"bg-white p-4 rounded shadow\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-bold mb-4\",\n        children: \"Number of Alerts by Brand and Level\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        width: \"100%\",\n        height: 300,\n        children: /*#__PURE__*/_jsxDEV(BarChart, {\n          data: stackedBarData,\n          margin: {\n            bottom: 20\n          },\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"3 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"brand\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this), alertLevels.map((level, idx) => /*#__PURE__*/_jsxDEV(Bar, {\n            dataKey: level,\n            stackId: \"a\",\n            fill: COLORS[idx % COLORS.length],\n            radius: idx === alertLevels.length - 1 ? [6, 6, 0, 0] : 0\n          }, level, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"bg-white p-4 rounded shadow\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-bold mb-4\",\n        children: \"Trust Score Trend Over Time by Brand\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        width: \"100%\",\n        height: 300,\n        children: /*#__PURE__*/_jsxDEV(LineChart, {\n          data: lineChartData,\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"3 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n            domain: [0, 100]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 13\n          }, this), uniqueBrands.map((brand, idx) => /*#__PURE__*/_jsxDEV(Line, {\n            type: \"monotone\",\n            dataKey: brand,\n            stroke: COLORS[idx % COLORS.length],\n            dot: false,\n            connectNulls: true,\n            strokeWidth: 2\n          }, brand, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n_s(FullDashboard, \"8D2MBDNwyMSjwVVRvj+53iuoQTM=\");\n_c = FullDashboard;\nvar _c;\n$RefreshReg$(_c, \"FullDashboard\");","map":{"version":3,"names":["React","useEffect","useState","axios","dayjs","ResponsiveContainer","BarChart","Bar","XAxis","YAxis","Tooltip","CartesianGrid","Legend","PieChart","Pie","Cell","LineChart","Line","jsxDEV","_jsxDEV","COLORS","FullDashboard","_s","brands","setBrands","alerts","setAlerts","get","then","res","data","catch","console","error","trustData","map","brand","avg_trust_score","Number","toFixed","alertLevelCounts","reduce","acc","alert","alert_level","alertLevelData","Object","entries","level","count","name","value","brandAlertLevelMap","forEach","alertLevels","Array","from","Set","a","stackedBarData","item","brandDateMap","trust_score","timestamp","date","format","key","trustScores","push","trendData","values","avgTrustScore","b","length","uniqueDates","d","sort","uniqueBrands","lineChartData","entry","found","find","className","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","margin","bottom","strokeDasharray","dataKey","domain","fill","radius","nameKey","outerRadius","label","percent","idx","stackId","type","stroke","dot","connectNulls","strokeWidth","_c","$RefreshReg$"],"sources":["/home/dell/zobon/dashboard-react/src/components/FullDashboard.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport dayjs from 'dayjs';\nimport {\n  ResponsiveContainer,\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  Tooltip,\n  CartesianGrid,\n  Legend,\n  PieChart,\n  Pie,\n  Cell,\n  LineChart,\n  Line,\n} from 'recharts';\n\nconst COLORS = ['#60A5FA', '#F87171', '#34D399', '#FBBF24', '#A78BFA', '#F472B6'];\n\nexport default function FullDashboard() {\n  const [brands, setBrands] = useState([]);\n  const [alerts, setAlerts] = useState([]);\n\n  useEffect(() => {\n    axios.get('http://localhost:5001/api/brands').then(res => setBrands(res.data)).catch(console.error);\n    axios.get('http://localhost:5001/api/alerts?limit=500').then(res => setAlerts(res.data)).catch(console.error);\n  }, []);\n\n  // 1. Average Trust Score by Brand for Bar Chart\n  const trustData = brands.map(({ brand, avg_trust_score }) => ({\n    brand,\n    avg_trust_score: Number(avg_trust_score.toFixed(2)),\n  }));\n\n  // 2. Distribution of Alert Levels for Pie Chart\n  const alertLevelCounts = alerts.reduce((acc, alert) => {\n    acc[alert.alert_level] = (acc[alert.alert_level] || 0) + 1;\n    return acc;\n  }, {});\n\n  const alertLevelData = Object.entries(alertLevelCounts).map(([level, count]) => ({\n    name: level,\n    value: count,\n  }));\n\n  // 3. Stacked Bar Chart data: Number of Alerts by Brand grouped by Alert Level\n  // Build a nested map: brand -> alert_level -> count\n  const brandAlertLevelMap = {};\n  brands.forEach(({ brand }) => {\n    brandAlertLevelMap[brand] = {};\n  });\n\n  alerts.forEach(({ brand, alert_level }) => {\n    if (brandAlertLevelMap[brand]) {\n      brandAlertLevelMap[brand][alert_level] = (brandAlertLevelMap[brand][alert_level] || 0) + 1;\n    }\n  });\n\n  // Prepare stacked bar chart data\n  const alertLevels = Array.from(new Set(alerts.map(a => a.alert_level)));\n\n  const stackedBarData = brands.map(({ brand }) => {\n    const item = { brand };\n    alertLevels.forEach(level => {\n      item[level] = brandAlertLevelMap[brand][level] || 0;\n    });\n    return item;\n  });\n\n  // 4. Line Chart: Trust Score Trend Over Time per Brand (from alerts)\n  const brandDateMap = {};\n  alerts.forEach(({ brand, trust_score, timestamp }) => {\n    if (!brand || trust_score == null || !timestamp) return;\n    const date = dayjs(timestamp).format('YYYY-MM-DD');\n    const key = `${brand}-${date}`;\n    if (!brandDateMap[key]) brandDateMap[key] = { brand, date, trustScores: [] };\n    brandDateMap[key].trustScores.push(trust_score);\n  });\n\n  const trendData = Object.values(brandDateMap).map(({ brand, date, trustScores }) => ({\n    brand,\n    date,\n    avgTrustScore: trustScores.reduce((a, b) => a + b, 0) / trustScores.length,\n  }));\n\n  const uniqueDates = Array.from(new Set(trendData.map(d => d.date))).sort();\n  const uniqueBrands = Array.from(new Set(trendData.map(d => d.brand)));\n\n  const lineChartData = uniqueDates.map(date => {\n    const entry = { date };\n    uniqueBrands.forEach(brand => {\n      const found = trendData.find(d => d.brand === brand && d.date === date);\n      entry[brand] = found ? Number(found.avgTrustScore.toFixed(2)) : null;\n    });\n    return entry;\n  });\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 p-6 bg-gray-50 min-h-screen\">\n\n      {/* Average Trust Score Bar Chart */}\n      <section className=\"bg-white p-4 rounded shadow\">\n        <h2 className=\"text-xl font-bold mb-4\">Average Trust Score by Brand</h2>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <BarChart data={trustData} margin={{ bottom: 20 }}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"brand\" />\n            <YAxis domain={[0, 100]} />\n            <Tooltip />\n            <Bar dataKey=\"avg_trust_score\" fill=\"#60A5FA\" radius={[6, 6, 0, 0]} />\n          </BarChart>\n        </ResponsiveContainer>\n      </section>\n\n      {/* Alert Level Distribution Pie Chart */}\n      <section className=\"bg-white p-4 rounded shadow\">\n        <h2 className=\"text-xl font-bold mb-4\">Alert Levels Distribution</h2>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <PieChart>\n            <Pie\n              data={alertLevelData}\n              dataKey=\"value\"\n              nameKey=\"name\"\n              outerRadius={100}\n              label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(1)}%`}\n            >\n              {alertLevelData.map((entry, idx) => (\n                <Cell key={idx} fill={COLORS[idx % COLORS.length]} />\n              ))}\n            </Pie>\n            <Tooltip />\n            <Legend />\n          </PieChart>\n        </ResponsiveContainer>\n      </section>\n\n      {/* Stacked Bar Chart: Alerts by Brand & Alert Level */}\n      <section className=\"bg-white p-4 rounded shadow\">\n        <h2 className=\"text-xl font-bold mb-4\">Number of Alerts by Brand and Level</h2>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <BarChart data={stackedBarData} margin={{ bottom: 20 }}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"brand\" />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            {alertLevels.map((level, idx) => (\n              <Bar\n                key={level}\n                dataKey={level}\n                stackId=\"a\"\n                fill={COLORS[idx % COLORS.length]}\n                radius={idx === alertLevels.length - 1 ? [6, 6, 0, 0] : 0}\n              />\n            ))}\n          </BarChart>\n        </ResponsiveContainer>\n      </section>\n\n      {/* Trust Score Trend Line Chart */}\n      <section className=\"bg-white p-4 rounded shadow\">\n        <h2 className=\"text-xl font-bold mb-4\">Trust Score Trend Over Time by Brand</h2>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <LineChart data={lineChartData}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"date\" />\n            <YAxis domain={[0, 100]} />\n            <Tooltip />\n            <Legend />\n            {uniqueBrands.map((brand, idx) => (\n              <Line\n                key={brand}\n                type=\"monotone\"\n                dataKey={brand}\n                stroke={COLORS[idx % COLORS.length]}\n                dot={false}\n                connectNulls\n                strokeWidth={2}\n              />\n            ))}\n          </LineChart>\n        </ResponsiveContainer>\n      </section>\n\n    </div>\n  );\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}